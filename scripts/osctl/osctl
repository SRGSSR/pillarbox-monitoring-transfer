#!/bin/bash

source "$(dirname "$0")/lib/logging.sh"

# Usage function
usage() {
  warn "Usage: $0 <command> [options]"
  echo ""
  echo "Commands:"
  echo "  force-rollover     Force rollover of the 'events' index"
  echo "  update-alias       Update the OpenSearch alias"
  echo "  update-template    Update the OpenSearch index template"
  echo "  update-ism-policy  Update the ISM policy"
  echo ""
  echo "Example:"
  echo "  $0 update-alias -h http://localhost:9200 -t '{\"actions\":...}'"
  echo ""
  exit 1
}

print_version() {
  if [ -f ".version" ]; then
    echo "osctl version: $(cat .version)"
  else
    error "Error: .version file not found."
    exit 1
  fi
}

# Check if the user wants to print the version
if [[ "$1" == "-v" ]]; then
  print_version
  exit 0
fi

# Check if a command is provided
if [ -z "$1" ]; then
  error "Error: No command provided."
  usage
fi

COMMAND=$1
shift  # Shift removes the first argument so the rest can be passed to the sub-script

# Define script paths
BIN_DIR="$(dirname "$0")/bin"  # Gets the directory of this script
AUTO_UPDATE_ISM_POLICY="$BIN_DIR/auto-update-ism-policy"
FORCE_ROLLOVER_SCRIPT="$BIN_DIR/force-rollover"
GET_ISM_SEQ="$BIN_DIR/get-ism-seq"
UPDATE_ALIAS_SCRIPT="$BIN_DIR/update-alias"
UPDATE_TEMPLATE_SCRIPT="$BIN_DIR/update-index-template"
UPDATE_ISM_POLICY="$BIN_DIR/update-ism-policy"

# Redirect to the appropriate script
case "$COMMAND" in
  auto-update-ism-policy)
    exec "$AUTO_UPDATE_ISM_POLICY" "$@"
    ;;
  force-rollover)
    exec "$FORCE_ROLLOVER_SCRIPT" "$@"
    ;;
  get-ism-seq)
    exec "$GET_ISM_SEQ" "$@"
    ;;
  update-alias)
    exec "$UPDATE_ALIAS_SCRIPT" "$@"
    ;;
  update-template)
    exec "$UPDATE_TEMPLATE_SCRIPT" "$@"
    ;;
  update-ism-policy)
    exec "$UPDATE_ISM_POLICY" "$@"
    ;;
  *)
    error "Error: Invalid command '$COMMAND'"
    usage
    ;;
esac
