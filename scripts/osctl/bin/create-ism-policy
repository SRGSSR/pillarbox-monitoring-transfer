#!/bin/bash

unset OPENSEARCH_HOST
unset POLICY
unset POLICY_JSON

source "$(dirname "$0")/../lib/logging.sh"

# Usage function
usage() {
  warn "Usage: $0 -h <opensearch_host> -p <policy> -d <policy_json>"
  echo ""
  echo "This script creates the specified ISM policy in OpenSearch."
  echo ""
  echo "Options:"
  echo "  -h <opensearch_host>   The OpenSearch host URL (e.g., http://localhost:9200)"
  echo "  -p <policy>            The target ISM policy"
  echo "  -d <policy_json>       The JSON payload for the policy"
  echo ""
  echo "Example:"
  echo "  $0 -h http://localhost:9200 -p events_policy -d '{ ... }' "
  echo ""
  exit 1
}

# Parse arguments
while getopts "h:p:d:" opt; do
  case ${opt} in
    h ) OPENSEARCH_HOST=$OPTARG ;;
    p ) POLICY=$OPTARG ;;
    d ) POLICY_JSON=$OPTARG ;;
    * ) usage ;;
  esac
done

# Check if required arguments are set
if [ -z "$OPENSEARCH_HOST" ] || [ -z "$POLICY_JSON" ] || [ -z "$SEQ_NO" ] || [ -z "$PRIMARY_TERM" ]; then
  error "Error: All parameters are required."
  usage
fi

info "Creating ISM policy '$POLICY'..."

CREATE_URL="$OPENSEARCH_HOST/_plugins/_ism/policies/$POLICY"
CREATE_RESPONSE=$(curl -s -X PUT "$CREATE_URL" -H 'Content-Type: application/json' -d "$POLICY_JSON")
CURL_EXIT_CODE=$?

# Check if curl failed
if [ $CURL_EXIT_CODE -ne 0 ]; then
  error "Error: Unable to communicate with OpenSearch. Please check your connection."
  exit 1
fi

# Check if template created was successful
if echo "$RESPONSE" | grep -q '"acknowledged":true'; then
  success "ISM policy '$POLICY' created successfully."
else
  error "Error: Failed to create the ISM policy. Response: $CREATE_RESPONSE"
  exit 1
fi
